[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[project]
name = "linguistics-agent"
version = "1.0.0"
description = "Specialized AI agent for linguistics, compilers, EBNF, and ANTLR analysis"
authors = [
    {name = "AI Agent", email = "agent@linguistics.ai"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
keywords = ["ai", "linguistics", "compiler", "ebnf", "antlr", "grammar"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Compilers",
    "Topic :: Text Processing :: Linguistic",
]

dependencies = [
    "aiosqlite>=0.19.0",
    "alembic>=1.13.0",
    "anthropic>=0.34.0",
    "antlr4-python3-runtime>=4.13.0",
    "asyncpg>=0.29.0",
    "fastapi>=0.104.0",
    "passlib[bcrypt]>=1.7.4",
    "pydantic-ai>=0.4.2",
    "pydantic-settings>=2.5.0",
    "pydantic>=2.11.4",
    "python-dotenv>=1.0.0",
    "python-jose[cryptography]>=3.3.0",
    "python-multipart>=0.0.6",
    "redis>=5.0.0",
    "sqlalchemy>=2.0.0",
    "structlog>=23.2.0",
    "uvicorn[standard]>=0.24.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.0",
    "ruff>=0.1.0",
    "black>=23.9.0",
    "isort>=5.12.0",
    "mypy>=1.6.0",
    "bandit>=1.7.5",
    "safety==3.2.5",
    "pre-commit>=3.5.0",
    "coverage>=7.3.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.0",
    "factory-boy>=3.3.0",
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.23.0",
]

[project.urls]
Homepage = "https://github.com/ai-linguistics-agent/ai-linguistics-agent"
Documentation = "https://ai-linguistics-agent.readthedocs.io"
Repository = "https://github.com/ai-linguistics-agent/ai-linguistics-agent"
Issues = "https://github.com/ai-linguistics-agent/ai-linguistics-agent/issues"

[project.scripts]
linguistics-agent = "linguistics_agent.cli:main"

# Ruff configuration (Rules-106 compliance)
[tool.ruff]
target-version = "py311"
line-length = 88
extend = ".linting/configs/ruff.toml"

[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "D103", "ANN201", "ANN001"]
"src/linguistics_agent/grammar/generated/*" = ["ALL"]

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.isort]
known-first-party = ["linguistics_agent"]
force-sort-within-sections = true

# MyPy configuration (Rules-103 compliance)
[tool.mypy]
config_file = ".linting/configs/mypy.ini"

[[tool.mypy.overrides]]
module = [
    "antlr4.*",
    "anthropic.*",
    "pydantic_ai.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "src.linguistics_agent.grammar.generated.*"
ignore_errors = true

# Black configuration (Rules-103 compliance)
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | src/linguistics_agent/grammar/generated
  | migrations
  | alembic/versions
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 88
known_first_party = ["linguistics_agent"]
known_third_party = ["pydantic", "fastapi", "anthropic", "neo4j", "chromadb"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
skip_glob = ["src/linguistics_agent/grammar/generated/*"]

# Pytest configuration (Rules-101 TDD compliance)
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=src/linguistics_agent",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-fail-under=80",
    "--tb=short",
    "--asyncio-mode=auto"
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "api: marks tests that require real API calls",
    "database: marks tests that require database connections"
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]

# Coverage configuration
[tool.coverage.run]
source = ["src/linguistics_agent"]
omit = [
    "*/tests/*",
    "*/test_*",
    "src/linguistics_agent/grammar/generated/*",
    "*/migrations/*",
    "*/alembic/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*"
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]
show_missing = true
precision = 2

# Bandit security configuration (Rules-106 compliance)
[tool.bandit]
exclude_dirs = ["tests", "src/linguistics_agent/grammar/generated", "migrations", "alembic"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection_process for tests

# Safety configuration for vulnerability scanning
[tool.safety]
ignore = []
output = "json"
full_report = true

# Dead code detection configuration
[tool.vulture]
min_confidence = 80
paths = ["src", "tests"]
exclude = ["migrations/", "alembic/", "src/linguistics_agent/grammar/generated/"]
ignore_decorators = ["@app.route", "@pytest.fixture", "@click.command"]
ignore_names = ["_*", "test_*"]

# Docstring style configuration
[tool.pydocstyle]
convention = "google"
add_ignore = ["D100", "D104", "D203", "D213"]
match_dir = "^(?!migrations|alembic|src/linguistics_agent/grammar/generated).*"

# Linting memory and metrics configuration (Rules-106)
[tool.linting]
memory_file = ".braains/LINTING-MEMORY.md"
metrics_file = ".braains/LINTING-METRICS.md"
violations_log = ".braains/LINTING-VIOLATIONS.md"
reports_dir = ".linting/reports"
configs_dir = ".linting/configs"
